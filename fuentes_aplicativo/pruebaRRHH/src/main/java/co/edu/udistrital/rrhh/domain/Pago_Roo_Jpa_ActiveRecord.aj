// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.edu.udistrital.rrhh.domain;

import co.edu.udistrital.rrhh.domain.Pago;
import java.util.List;
import javax.persistence.EntityManager;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Pago_Roo_Jpa_ActiveRecord {
    
    public static final List<String> Pago.fieldNames4OrderClauseFilter = java.util.Arrays.asList("pagEmpleado", "conConcepto", "pagTipo", "pagValorPago", "pagDescripcion", "pagEstado", "entityManager", "pagCodigo");
    
    public static final EntityManager Pago.entityManager() {
        EntityManager em = new Pago().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Pago.countPagoes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Pago o", Long.class).getSingleResult();
    }
    
    public static List<Pago> Pago.findAllPagoes() {
        return entityManager().createQuery("SELECT o FROM Pago o", Pago.class).getResultList();
    }
    
    public static List<Pago> Pago.findAllPagoes(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Pago o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Pago.class).getResultList();
    }
    
    public static Pago Pago.findPago(Integer pagCodigo) {
        if (pagCodigo == null) return null;
        return entityManager().find(Pago.class, pagCodigo);
    }
    
    public static List<Pago> Pago.findPagoEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Pago o", Pago.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Pago> Pago.findPagoEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Pago o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Pago.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Pago.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Pago.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Pago attached = Pago.findPago(this.pagCodigo);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Pago.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Pago.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Pago Pago.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Pago merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
